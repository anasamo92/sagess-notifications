
import { createStore, applyMiddleware, compose } from 'redux';
import { persistState } from 'redux-devtools';
import thunk from 'redux-thunk';
import rootReducer from '../reducers';
import DevTools from '../container/dev-tools';

var isDev = __DEV__;

var enhancerDev = compose(applyMiddleware(thunk), DevTools.instrument(), persistState(window.location.href.match(/[?&]debug_session=([^&]+)\b/)));

var enhancerProd = compose(applyMiddleware(thunk));

export default function configureStore(initialState) {
    var storeEnhancer = isDev ? enhancerDev : enhancerProd;
    var store = createStore(rootReducer, initialState, storeEnhancer);
    if (module.hot) {
        module.hot.accept('../reducers', function () {
            return store.replaceReducer(require('../reducers').default);
        });
    }
    return store;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNob3J0ZW4uanMiXSwibmFtZXMiOlsiY3JlYXRlU3RvcmUiLCJhcHBseU1pZGRsZXdhcmUiLCJjb21wb3NlIiwicGVyc2lzdFN0YXRlIiwidGh1bmsiLCJyb290UmVkdWNlciIsIkRldlRvb2xzIiwiaXNEZXYiLCJfX0RFVl9fIiwiZW5oYW5jZXJEZXYiLCJpbnN0cnVtZW50Iiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwibWF0Y2giLCJlbmhhbmNlclByb2QiLCJjb25maWd1cmVTdG9yZSIsImluaXRpYWxTdGF0ZSIsInN0b3JlRW5oYW5jZXIiLCJzdG9yZSIsIm1vZHVsZSIsImhvdCIsImFjY2VwdCIsInJlcGxhY2VSZWR1Y2VyIiwicmVxdWlyZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiI7QUFDQSxTQUFTQSxXQUFULEVBQXNCQyxlQUF0QixFQUF1Q0MsT0FBdkMsUUFBc0QsT0FBdEQ7QUFDQSxTQUFTQyxZQUFULFFBQTZCLGdCQUE3QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsYUFBbEI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGFBQXhCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQix3QkFBckI7O0FBRUEsSUFBTUMsUUFBUUMsT0FBZDs7QUFFQSxJQUFNQyxjQUFjUCxRQUNoQkQsZ0JBQWdCRyxLQUFoQixDQURnQixFQUVoQkUsU0FBU0ksVUFBVCxFQUZnQixFQUdoQlAsYUFDSVEsT0FBT0MsUUFBUCxDQUFnQkMsSUFBaEIsQ0FBcUJDLEtBQXJCLENBQ0ksNkJBREosQ0FESixDQUhnQixDQUFwQjs7QUFVQSxJQUFNQyxlQUFlYixRQUNqQkQsZ0JBQWdCRyxLQUFoQixDQURpQixDQUFyQjs7QUFJQSxlQUFlLFNBQVNZLGNBQVQsQ0FBd0JDLFlBQXhCLEVBQXNDO0FBQ2pELFFBQU1DLGdCQUFnQlgsUUFBUUUsV0FBUixHQUFzQk0sWUFBNUM7QUFDQSxRQUFNSSxRQUFRbkIsWUFBWUssV0FBWixFQUF5QlksWUFBekIsRUFBdUNDLGFBQXZDLENBQWQ7QUFDQSxRQUFJRSxPQUFPQyxHQUFYLEVBQWdCO0FBQ1pELGVBQU9DLEdBQVAsQ0FBV0MsTUFBWCxDQUFrQixhQUFsQixFQUFpQztBQUFBLG1CQUFNSCxNQUFNSSxjQUFOLENBQXFCQyxRQUFRLGFBQVIsRUFBdUJDLE9BQTVDLENBQU47QUFBQSxTQUFqQztBQUNIO0FBQ0QsV0FBT04sS0FBUDtBQUNIIiwiZmlsZSI6InNob3J0ZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHsgcGVyc2lzdFN0YXRlIH0gZnJvbSAncmVkdXgtZGV2dG9vbHMnO1xyXG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xyXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi4vcmVkdWNlcnMnO1xyXG5pbXBvcnQgRGV2VG9vbHMgZnJvbSAnLi4vY29udGFpbmVyL2Rldi10b29scyc7XHJcblxyXG5jb25zdCBpc0RldiA9IF9fREVWX187XHJcblxyXG5jb25zdCBlbmhhbmNlckRldiA9IGNvbXBvc2UoXHJcbiAgICBhcHBseU1pZGRsZXdhcmUodGh1bmspLFxyXG4gICAgRGV2VG9vbHMuaW5zdHJ1bWVudCgpLFxyXG4gICAgcGVyc2lzdFN0YXRlKFxyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKFxyXG4gICAgICAgICAgICAvWz8mXWRlYnVnX3Nlc3Npb249KFteJl0rKVxcYi9cclxuICAgICAgICApXHJcbiAgICApXHJcbik7XHJcblxyXG5jb25zdCBlbmhhbmNlclByb2QgPSBjb21wb3NlKFxyXG4gICAgYXBwbHlNaWRkbGV3YXJlKHRodW5rKVxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uZmlndXJlU3RvcmUoaW5pdGlhbFN0YXRlKSB7XHJcbiAgICBjb25zdCBzdG9yZUVuaGFuY2VyID0gaXNEZXYgPyBlbmhhbmNlckRldiA6IGVuaGFuY2VyUHJvZDtcclxuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgc3RvcmVFbmhhbmNlcik7XHJcbiAgICBpZiAobW9kdWxlLmhvdCkge1xyXG4gICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCcuLi9yZWR1Y2VycycsICgpID0+IHN0b3JlLnJlcGxhY2VSZWR1Y2VyKHJlcXVpcmUoJy4uL3JlZHVjZXJzJykuZGVmYXVsdCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0b3JlO1xyXG59XHJcbiJdfQ==