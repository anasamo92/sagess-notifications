import fetch from 'isomorphic-fetch';
import { getConfig } from '../config';
import { clearError, setError } from './error';

//Import other actions
import { readNotification, readNotificationGroup } from './';

//Notification actions
export var DELETE_NOTIFICATION = 'DELETE_NOTIFICATION';
export var SUCCESS_DELETE_NOTIFICATION = 'SUCCESS_DELETE_NOTIFICATION';
export var FAIL_DELETE_NOTIFICATION = 'FAIL_DELETE_NOTIFICATION';

//Notification group actions

export var DELETE_NOTIFICATION_GROUP = 'DELETE_NOTIFICATION_GROUP';
export var SUCCESS_DELETE_NOTIFICATION_GROUP = 'SUCCESS_DELETE_NOTIFICATION_GROUP';
export var FAIL_DELETE_NOTIFICATION_GROUP = 'FAIL_DELETE_NOTIFICATION_GROUP';

function deleteNotificationSuccess(jsonDeleted) {
    return {
        type: SUCCESS_DELETE_NOTIFICATION,
        payload: jsonDeleted
    };
}

//
function deleteNotificationGroupSuccess(notificationIds) {
    return {
        type: SUCCESS_DELETE_NOTIFICATION_GROUP,
        payload: notificationIds
    };
}

//
export function deleteNotification(notificationId) {
    return function callDeleteNotification(dispatch) {
        //read the conf after extension.
        var config = getConfig();
        //Create the URL
        var URL = config.rootURL + '/' + config.notificationURL;
        //Maybe see https://github.com/rackt/redux/issues/911#issuecomment-149361073 for a saner implementation instead of chaining two dispatch.
        dispatch(clearError());
        dispatch(readNotification(notificationId));

        var credentialOptions = config.useCredentials ? { credentials: 'include' } : {};
        var contentType = config.noContentType ? {} : config.contentType ? { headers: { contentType: contentType } } : { headers: { 'Content-Type': 'application/json' } };

        return fetch(URL + '/' + notificationId, Object.assign({ method: 'delete' }, credentialOptions, contentType)).then(function (response) {
            return response && response.status !== 204 ? response.json() : undefined;
        }).then(function (json) {
            return dispatch(deleteNotificationSuccess(json));
        }).catch(function (err) {
            return dispatch(setError({ content: err.message, type: 'network' }));
        });
    };
}

//
export function deleteGroupNotification(notificationIds) {
    return function callDeleteNotificationGroup(dispatch) {
        //read the conf after extension.
        var config = getConfig();
        //Create the URL
        var URL = config.rootURL + '/' + config.notificationURL;
        //Maybe see https://github.com/rackt/redux/issues/911#issuecomment-149361073 for a saner implementation instead of chaining two dispatch.
        dispatch(clearError());
        dispatch(readNotificationGroup(notificationIds));

        var credentialOptions = config.useCredentials ? { credentials: 'include' } : {};
        var contentType = config.noContentType ? {} : config.contentType ? { headers: { contentType: contentType } } : { headers: { 'Content-Type': 'application/json' } };

        return fetch('' + URL, Object.assign({ method: 'delete', body: JSON.stringify(notificationIds) }, credentialOptions, contentType)).then(function (response) {
            return response && response.status !== 204 ? response.json() : undefined;
        }).then(function (json) {
            return dispatch(deleteNotificationGroupSuccess(json));
        }).catch(function (err) {
            return dispatch(setError({ content: err.message, type: 'network' }));
        });
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,