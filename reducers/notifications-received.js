import { ADD_NOTIFICATION, ADD_NOTIFICATIONS, READ_NOTIFICATION, READ_NOTIFICATION_GROUP } from '../actions';
import { RECEIVE_NOTIFICATIONS } from '../actions/fetch-notifications';
import { DISMISS_NOTIFICATION } from '../actions/receive-notifications';
import generateError from './util/error-generator';
import { isObject, isArray, isString, isNumber } from 'lodash/lang';
var REDUCER_NAME = 'NOTIFICATIONS_RECEIVED';

function _addNotifToStateIfNeeded(state, notif) {
    var uuid = notif.uuid;

    if (!state[uuid]) {
        state[uuid] = notif;
    }
    return Object.assign({}, state);
}
function _addReadToNotificationIfExists(state, uuid) {
    if (isObject(state[uuid])) {
        state[uuid] = Object.assign({}, state[uuid], { displayed: true });
    }
    return Object.assign({}, state);
}

// reducers in charge of generatin the notification list
export default function notificationsReceived() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var type = action.type,
        index = action.index,
        payload = action.payload;

    switch (type) {
        case ADD_NOTIFICATION:
            if (!isObject(payload) || isArray(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'object' }));
            }
            return _addNotifToStateIfNeeded(state, payload);
        case ADD_NOTIFICATIONS:
        case RECEIVE_NOTIFICATIONS:
            if (!isArray(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'array' }));
            }
            action.payload.forEach(function (notif) {
                return _addNotifToStateIfNeeded(state, notif);
            });
            return Object.assign({}, state);
        case DISMISS_NOTIFICATION:
        case READ_NOTIFICATION:
            if (!isString(payload) && !isNumber(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'string|number' }));
            }
            return _addReadToNotificationIfExists(state, payload);
        case READ_NOTIFICATION_GROUP:
            if (!isArray(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'array' }));
            }
            payload.forEach(function (notifUuid) {
                return _addReadToNotificationIfExists(state, notifUuid);
            });
            return Object.assign({}, state);
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNob3J0ZW4uanMiXSwibmFtZXMiOlsiQUREX05PVElGSUNBVElPTiIsIkFERF9OT1RJRklDQVRJT05TIiwiUkVBRF9OT1RJRklDQVRJT04iLCJSRUFEX05PVElGSUNBVElPTl9HUk9VUCIsIlJFQ0VJVkVfTk9USUZJQ0FUSU9OUyIsIkRJU01JU1NfTk9USUZJQ0FUSU9OIiwiZ2VuZXJhdGVFcnJvciIsImlzT2JqZWN0IiwiaXNBcnJheSIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJSRURVQ0VSX05BTUUiLCJfYWRkTm90aWZUb1N0YXRlSWZOZWVkZWQiLCJzdGF0ZSIsIm5vdGlmIiwidXVpZCIsIl9hZGRSZWFkVG9Ob3RpZmljYXRpb25JZkV4aXN0cyIsImRpc3BsYXllZCIsIm5vdGlmaWNhdGlvbnNSZWNlaXZlZCIsImFjdGlvbiIsInR5cGUiLCJpbmRleCIsInBheWxvYWQiLCJFcnJvciIsIm5hbWUiLCJleHBlY3RlZFR5cGUiLCJmb3JFYWNoIiwibm90aWZVdWlkIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxnQkFBVCxFQUEyQkMsaUJBQTNCLEVBQThDQyxpQkFBOUMsRUFBaUVDLHVCQUFqRSxRQUErRixZQUEvRjtBQUNBLFNBQVFDLHFCQUFSLFFBQW9DLGdDQUFwQztBQUNBLFNBQVNDLG9CQUFULFFBQW9DLGtDQUFwQztBQUNBLE9BQU9DLGFBQVAsTUFBMEIsd0JBQTFCO0FBQ0EsU0FBUUMsUUFBUixFQUFrQkMsT0FBbEIsRUFBMkJDLFFBQTNCLEVBQXFDQyxRQUFyQyxRQUFvRCxhQUFwRDtBQUNBLElBQU1DLGVBQWUsd0JBQXJCOztBQUVBLFNBQVNDLHdCQUFULENBQWtDQyxLQUFsQyxFQUF5Q0MsS0FBekMsRUFBZ0Q7QUFBQSxRQUNyQ0MsSUFEcUMsR0FDN0JELEtBRDZCLENBQ3JDQyxJQURxQzs7QUFFNUMsUUFBRyxDQUFDRixNQUFNRSxJQUFOLENBQUosRUFBaUI7QUFDYkYsY0FBTUUsSUFBTixJQUFjRCxLQUFkO0FBQ0g7QUFDRCw2QkFBV0QsS0FBWDtBQUNIO0FBQ0QsU0FBU0csOEJBQVQsQ0FBd0NILEtBQXhDLEVBQStDRSxJQUEvQyxFQUFxRDtBQUNqRCxRQUFHUixTQUFTTSxNQUFNRSxJQUFOLENBQVQsQ0FBSCxFQUEwQjtBQUN0QkYsY0FBTUUsSUFBTixzQkFBa0JGLE1BQU1FLElBQU4sQ0FBbEIsSUFBK0JFLFdBQVcsSUFBMUM7QUFDSDtBQUNELDZCQUFXSixLQUFYO0FBQ0g7O0FBRUQ7QUFDQSxlQUFlLFNBQVNLLHFCQUFULEdBQXdEO0FBQUEsUUFBekJMLEtBQXlCLHVFQUFqQixFQUFpQjtBQUFBLFFBQWJNLE1BQWEsdUVBQUosRUFBSTtBQUFBLFFBQzVEQyxJQUQ0RCxHQUNwQ0QsTUFEb0MsQ0FDNURDLElBRDREO0FBQUEsUUFDdERDLEtBRHNELEdBQ3BDRixNQURvQyxDQUN0REUsS0FEc0Q7QUFBQSxRQUMvQ0MsT0FEK0MsR0FDcENILE1BRG9DLENBQy9DRyxPQUQrQzs7QUFFbkUsWUFBUUYsSUFBUjtBQUNJLGFBQUtwQixnQkFBTDtBQUNJLGdCQUFHLENBQUNPLFNBQVNlLE9BQVQsQ0FBRCxJQUFzQmQsUUFBUWMsT0FBUixDQUF6QixFQUEyQztBQUFFLHNCQUFNLElBQUlDLEtBQUosQ0FBV2pCLGNBQWMsRUFBQ2tCLE1BQU1iLFlBQVAsRUFBcUJRLGNBQXJCLEVBQTZCTSxjQUFjLFFBQTNDLEVBQWQsQ0FBWCxDQUFOO0FBQXdGO0FBQ3JJLG1CQUFPYix5QkFBeUJDLEtBQXpCLEVBQWdDUyxPQUFoQyxDQUFQO0FBQ0osYUFBS3JCLGlCQUFMO0FBQ0EsYUFBS0cscUJBQUw7QUFDSSxnQkFBRyxDQUFDSSxRQUFRYyxPQUFSLENBQUosRUFBc0I7QUFBRSxzQkFBTSxJQUFJQyxLQUFKLENBQVVqQixjQUFjLEVBQUNrQixNQUFNYixZQUFQLEVBQXFCUSxjQUFyQixFQUE2Qk0sY0FBYyxPQUEzQyxFQUFkLENBQVYsQ0FBTjtBQUFzRjtBQUM5R04sbUJBQU9HLE9BQVAsQ0FBZUksT0FBZixDQUF1QixVQUFDWixLQUFEO0FBQUEsdUJBQVdGLHlCQUF5QkMsS0FBekIsRUFBZ0NDLEtBQWhDLENBQVg7QUFBQSxhQUF2QjtBQUNBLHFDQUFXRCxLQUFYO0FBQ0osYUFBS1Isb0JBQUw7QUFDQSxhQUFLSCxpQkFBTDtBQUNJLGdCQUFHLENBQUNPLFNBQVNhLE9BQVQsQ0FBRCxJQUFzQixDQUFDWixTQUFTWSxPQUFULENBQTFCLEVBQTZDO0FBQUUsc0JBQU0sSUFBSUMsS0FBSixDQUFVakIsY0FBYyxFQUFDa0IsTUFBTWIsWUFBUCxFQUFxQlEsY0FBckIsRUFBNkJNLGNBQWMsZUFBM0MsRUFBZCxDQUFWLENBQU47QUFBOEY7QUFDN0ksbUJBQU9ULCtCQUErQkgsS0FBL0IsRUFBcUNTLE9BQXJDLENBQVA7QUFDSixhQUFLbkIsdUJBQUw7QUFDSSxnQkFBRyxDQUFDSyxRQUFRYyxPQUFSLENBQUosRUFBc0I7QUFBRSxzQkFBTSxJQUFJQyxLQUFKLENBQVVqQixjQUFjLEVBQUNrQixNQUFNYixZQUFQLEVBQXFCUSxjQUFyQixFQUE2Qk0sY0FBYyxPQUEzQyxFQUFkLENBQVYsQ0FBTjtBQUFzRjtBQUM5R0gsb0JBQVFJLE9BQVIsQ0FBZ0IsVUFBQ0MsU0FBRDtBQUFBLHVCQUFlWCwrQkFBK0JILEtBQS9CLEVBQXNDYyxTQUF0QyxDQUFmO0FBQUEsYUFBaEI7QUFDQSxxQ0FBV2QsS0FBWDtBQUNKO0FBQ0ksbUJBQU9BLEtBQVA7QUFsQlI7QUFvQkgiLCJmaWxlIjoic2hvcnRlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFERF9OT1RJRklDQVRJT04sIEFERF9OT1RJRklDQVRJT05TLCBSRUFEX05PVElGSUNBVElPTiwgUkVBRF9OT1RJRklDQVRJT05fR1JPVVB9IGZyb20gJy4uL2FjdGlvbnMnO1xyXG5pbXBvcnQge1JFQ0VJVkVfTk9USUZJQ0FUSU9OU30gZnJvbSAnLi4vYWN0aW9ucy9mZXRjaC1ub3RpZmljYXRpb25zJztcclxuaW1wb3J0IHsgRElTTUlTU19OT1RJRklDQVRJT059IGZyb20gJy4uL2FjdGlvbnMvcmVjZWl2ZS1ub3RpZmljYXRpb25zJztcclxuaW1wb3J0IGdlbmVyYXRlRXJyb3IgZnJvbSAnLi91dGlsL2Vycm9yLWdlbmVyYXRvcic7XHJcbmltcG9ydCB7aXNPYmplY3QsIGlzQXJyYXksIGlzU3RyaW5nLCBpc051bWJlcn0gZnJvbSAnbG9kYXNoL2xhbmcnO1xyXG5jb25zdCBSRURVQ0VSX05BTUUgPSAnTk9USUZJQ0FUSU9OU19SRUNFSVZFRCc7XHJcblxyXG5mdW5jdGlvbiBfYWRkTm90aWZUb1N0YXRlSWZOZWVkZWQoc3RhdGUsIG5vdGlmKSB7XHJcbiAgICBjb25zdCB7dXVpZH0gPSBub3RpZjtcclxuICAgIGlmKCFzdGF0ZVt1dWlkXSkge1xyXG4gICAgICAgIHN0YXRlW3V1aWRdID0gbm90aWY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gey4uLnN0YXRlfTtcclxufVxyXG5mdW5jdGlvbiBfYWRkUmVhZFRvTm90aWZpY2F0aW9uSWZFeGlzdHMoc3RhdGUsIHV1aWQpIHtcclxuICAgIGlmKGlzT2JqZWN0KHN0YXRlW3V1aWRdKSkge1xyXG4gICAgICAgIHN0YXRlW3V1aWRdID0gey4uLnN0YXRlW3V1aWRdLCBkaXNwbGF5ZWQ6IHRydWV9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsuLi5zdGF0ZX07XHJcbn1cclxuXHJcbi8vIHJlZHVjZXJzIGluIGNoYXJnZSBvZiBnZW5lcmF0aW4gdGhlIG5vdGlmaWNhdGlvbiBsaXN0XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vdGlmaWNhdGlvbnNSZWNlaXZlZChzdGF0ZSA9IHt9LCBhY3Rpb24gPSB7fSkge1xyXG4gICAgY29uc3Qge3R5cGUsIGluZGV4LCBwYXlsb2FkfSA9IGFjdGlvbjtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgQUREX05PVElGSUNBVElPTjpcclxuICAgICAgICAgICAgaWYoIWlzT2JqZWN0KHBheWxvYWQpIHx8IGlzQXJyYXkocGF5bG9hZCkpIHsgdGhyb3cgbmV3IEVycm9yIChnZW5lcmF0ZUVycm9yKHtuYW1lOiBSRURVQ0VSX05BTUUsIGFjdGlvbiwgZXhwZWN0ZWRUeXBlOiAnb2JqZWN0J30pKTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gX2FkZE5vdGlmVG9TdGF0ZUlmTmVlZGVkKHN0YXRlLCBwYXlsb2FkKTtcclxuICAgICAgICBjYXNlIEFERF9OT1RJRklDQVRJT05TOlxyXG4gICAgICAgIGNhc2UgUkVDRUlWRV9OT1RJRklDQVRJT05TOlxyXG4gICAgICAgICAgICBpZighaXNBcnJheShwYXlsb2FkKSkgeyB0aHJvdyBuZXcgRXJyb3IoZ2VuZXJhdGVFcnJvcih7bmFtZTogUkVEVUNFUl9OQU1FLCBhY3Rpb24sIGV4cGVjdGVkVHlwZTogJ2FycmF5J30pKTsgfVxyXG4gICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5mb3JFYWNoKChub3RpZikgPT4gX2FkZE5vdGlmVG9TdGF0ZUlmTmVlZGVkKHN0YXRlLCBub3RpZikpO1xyXG4gICAgICAgICAgICByZXR1cm4gey4uLnN0YXRlfTtcclxuICAgICAgICBjYXNlIERJU01JU1NfTk9USUZJQ0FUSU9OOlxyXG4gICAgICAgIGNhc2UgUkVBRF9OT1RJRklDQVRJT046XHJcbiAgICAgICAgICAgIGlmKCFpc1N0cmluZyhwYXlsb2FkKSAmJiAhaXNOdW1iZXIocGF5bG9hZCkpIHsgdGhyb3cgbmV3IEVycm9yKGdlbmVyYXRlRXJyb3Ioe25hbWU6IFJFRFVDRVJfTkFNRSwgYWN0aW9uLCBleHBlY3RlZFR5cGU6ICdzdHJpbmd8bnVtYmVyJ30pKTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gX2FkZFJlYWRUb05vdGlmaWNhdGlvbklmRXhpc3RzKHN0YXRlLHBheWxvYWQpO1xyXG4gICAgICAgIGNhc2UgUkVBRF9OT1RJRklDQVRJT05fR1JPVVA6XHJcbiAgICAgICAgICAgIGlmKCFpc0FycmF5KHBheWxvYWQpKSB7IHRocm93IG5ldyBFcnJvcihnZW5lcmF0ZUVycm9yKHtuYW1lOiBSRURVQ0VSX05BTUUsIGFjdGlvbiwgZXhwZWN0ZWRUeXBlOiAnYXJyYXknfSkpOyB9XHJcbiAgICAgICAgICAgIHBheWxvYWQuZm9yRWFjaCgobm90aWZVdWlkKSA9PiBfYWRkUmVhZFRvTm90aWZpY2F0aW9uSWZFeGlzdHMoc3RhdGUsIG5vdGlmVXVpZCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gey4uLnN0YXRlfTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIl19