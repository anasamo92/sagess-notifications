import { ADD_NOTIFICATION, ADD_NOTIFICATIONS, READ_NOTIFICATION, READ_NOTIFICATION_GROUP } from '../actions';
import { RECEIVE_NOTIFICATIONS } from '../actions/fetch-notifications';
import { DISMISS_NOTIFICATION } from '../actions/receive-notifications';
import notificationsReceivedReducer from './notifications-received';
import hasFetchedOnceReducer from './has-fetched-once';

export default function notificationReceiver() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { hasFetchedOnce: false, notificationsReceived: {} };
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var type = action.type,
        index = action.index,
        payload = action.payload;

    switch (type) {
        case ADD_NOTIFICATIONS:
        case RECEIVE_NOTIFICATIONS:
            var hasFetchedOnce = state.hasFetchedOnce,
                notificationsReceived = state.notificationsReceived;

            if (!hasFetchedOnce) {
                action.payload = payload.map(function (n) {
                    return Object.assign({}, n, { displayed: true });
                });
            }
            return {
                hasFetchedOnce: hasFetchedOnceReducer(hasFetchedOnce, action),
                notificationsReceived: notificationsReceivedReducer(notificationsReceived, action)
            };
        case ADD_NOTIFICATION:
        case DISMISS_NOTIFICATION:
        case READ_NOTIFICATION:
        case READ_NOTIFICATION_GROUP:
            return {
                hasFetchedOnce: hasFetchedOnceReducer(hasFetchedOnce, action),
                notificationsReceived: notificationsReceivedReducer(notificationsReceived, action)
            };
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNob3J0ZW4uanMiXSwibmFtZXMiOlsiQUREX05PVElGSUNBVElPTiIsIkFERF9OT1RJRklDQVRJT05TIiwiUkVBRF9OT1RJRklDQVRJT04iLCJSRUFEX05PVElGSUNBVElPTl9HUk9VUCIsIlJFQ0VJVkVfTk9USUZJQ0FUSU9OUyIsIkRJU01JU1NfTk9USUZJQ0FUSU9OIiwibm90aWZpY2F0aW9uc1JlY2VpdmVkUmVkdWNlciIsImhhc0ZldGNoZWRPbmNlUmVkdWNlciIsIm5vdGlmaWNhdGlvblJlY2VpdmVyIiwic3RhdGUiLCJoYXNGZXRjaGVkT25jZSIsIm5vdGlmaWNhdGlvbnNSZWNlaXZlZCIsImFjdGlvbiIsInR5cGUiLCJpbmRleCIsInBheWxvYWQiLCJtYXAiLCJuIiwiZGlzcGxheWVkIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxnQkFBVCxFQUEyQkMsaUJBQTNCLEVBQThDQyxpQkFBOUMsRUFBaUVDLHVCQUFqRSxRQUErRixZQUEvRjtBQUNBLFNBQVFDLHFCQUFSLFFBQW9DLGdDQUFwQztBQUNBLFNBQVNDLG9CQUFULFFBQW9DLGtDQUFwQztBQUNBLE9BQU9DLDRCQUFQLE1BQXlDLDBCQUF6QztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLG9CQUFsQzs7QUFFQSxlQUFlLFNBQVNDLG9CQUFULEdBQXVHO0FBQUEsUUFBekVDLEtBQXlFLHVFQUFqRSxFQUFDQyxnQkFBZ0IsS0FBakIsRUFBd0JDLHVCQUF1QixFQUEvQyxFQUFpRTtBQUFBLFFBQWJDLE1BQWEsdUVBQUosRUFBSTtBQUFBLFFBQzNHQyxJQUQyRyxHQUNuRkQsTUFEbUYsQ0FDM0dDLElBRDJHO0FBQUEsUUFDckdDLEtBRHFHLEdBQ25GRixNQURtRixDQUNyR0UsS0FEcUc7QUFBQSxRQUM5RkMsT0FEOEYsR0FDbkZILE1BRG1GLENBQzlGRyxPQUQ4Rjs7QUFFbEgsWUFBUUYsSUFBUjtBQUNJLGFBQUtaLGlCQUFMO0FBQ0EsYUFBS0cscUJBQUw7QUFBQSxnQkFDV00sY0FEWCxHQUNvREQsS0FEcEQsQ0FDV0MsY0FEWDtBQUFBLGdCQUMyQkMscUJBRDNCLEdBQ29ERixLQURwRCxDQUMyQkUscUJBRDNCOztBQUVJLGdCQUFJLENBQUNELGNBQUwsRUFBcUI7QUFDakJFLHVCQUFPRyxPQUFQLEdBQWlCQSxRQUFRQyxHQUFSLENBQWE7QUFBQSw2Q0FBVUMsQ0FBVixJQUFhQyxXQUFXLElBQXhCO0FBQUEsaUJBQWIsQ0FBakI7QUFDSDtBQUNELG1CQUFPO0FBQ0hSLGdDQUFnQkgsc0JBQXNCRyxjQUF0QixFQUFzQ0UsTUFBdEMsQ0FEYjtBQUVIRCx1Q0FBdUJMLDZCQUE2QksscUJBQTdCLEVBQW9EQyxNQUFwRDtBQUZwQixhQUFQO0FBSUosYUFBS1osZ0JBQUw7QUFDQSxhQUFLSyxvQkFBTDtBQUNBLGFBQUtILGlCQUFMO0FBQ0EsYUFBS0MsdUJBQUw7QUFDSSxtQkFBTztBQUNITyxnQ0FBZ0JILHNCQUFzQkcsY0FBdEIsRUFBc0NFLE1BQXRDLENBRGI7QUFFSEQsdUNBQXVCTCw2QkFBNkJLLHFCQUE3QixFQUFvREMsTUFBcEQ7QUFGcEIsYUFBUDtBQUlKO0FBQ0ksbUJBQU9ILEtBQVA7QUFwQlI7QUFzQkgiLCJmaWxlIjoic2hvcnRlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFERF9OT1RJRklDQVRJT04sIEFERF9OT1RJRklDQVRJT05TLCBSRUFEX05PVElGSUNBVElPTiwgUkVBRF9OT1RJRklDQVRJT05fR1JPVVB9IGZyb20gJy4uL2FjdGlvbnMnO1xyXG5pbXBvcnQge1JFQ0VJVkVfTk9USUZJQ0FUSU9OU30gZnJvbSAnLi4vYWN0aW9ucy9mZXRjaC1ub3RpZmljYXRpb25zJztcclxuaW1wb3J0IHsgRElTTUlTU19OT1RJRklDQVRJT059IGZyb20gJy4uL2FjdGlvbnMvcmVjZWl2ZS1ub3RpZmljYXRpb25zJztcclxuaW1wb3J0IG5vdGlmaWNhdGlvbnNSZWNlaXZlZFJlZHVjZXIgZnJvbSAnLi9ub3RpZmljYXRpb25zLXJlY2VpdmVkJztcclxuaW1wb3J0IGhhc0ZldGNoZWRPbmNlUmVkdWNlciBmcm9tICcuL2hhcy1mZXRjaGVkLW9uY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm90aWZpY2F0aW9uUmVjZWl2ZXIoc3RhdGUgPSB7aGFzRmV0Y2hlZE9uY2U6IGZhbHNlLCBub3RpZmljYXRpb25zUmVjZWl2ZWQ6IHt9fSwgYWN0aW9uID0ge30pIHtcclxuICAgIGNvbnN0IHt0eXBlLCBpbmRleCwgcGF5bG9hZH0gPSBhY3Rpb247XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIEFERF9OT1RJRklDQVRJT05TOlxyXG4gICAgICAgIGNhc2UgUkVDRUlWRV9OT1RJRklDQVRJT05TOlxyXG4gICAgICAgICAgICBjb25zdCB7aGFzRmV0Y2hlZE9uY2UsIG5vdGlmaWNhdGlvbnNSZWNlaXZlZH0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgaWYgKCFoYXNGZXRjaGVkT25jZSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQgPSBwYXlsb2FkLm1hcCggbiA9PiAoey4uLm4sIGRpc3BsYXllZDogdHJ1ZX0pICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGhhc0ZldGNoZWRPbmNlOiBoYXNGZXRjaGVkT25jZVJlZHVjZXIoaGFzRmV0Y2hlZE9uY2UsIGFjdGlvbiksXHJcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25zUmVjZWl2ZWQ6IG5vdGlmaWNhdGlvbnNSZWNlaXZlZFJlZHVjZXIobm90aWZpY2F0aW9uc1JlY2VpdmVkLCBhY3Rpb24pXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBBRERfTk9USUZJQ0FUSU9OOlxyXG4gICAgICAgIGNhc2UgRElTTUlTU19OT1RJRklDQVRJT046XHJcbiAgICAgICAgY2FzZSBSRUFEX05PVElGSUNBVElPTjpcclxuICAgICAgICBjYXNlIFJFQURfTk9USUZJQ0FUSU9OX0dST1VQOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaGFzRmV0Y2hlZE9uY2U6IGhhc0ZldGNoZWRPbmNlUmVkdWNlcihoYXNGZXRjaGVkT25jZSwgYWN0aW9uKSxcclxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbnNSZWNlaXZlZDogbm90aWZpY2F0aW9uc1JlY2VpdmVkUmVkdWNlcihub3RpZmljYXRpb25zUmVjZWl2ZWQsIGFjdGlvbilcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIl19