function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { ADD_NOTIFICATION, ADD_NOTIFICATIONS, READ_NOTIFICATION, READ_NOTIFICATION_GROUP } from '../actions';
import { RECEIVE_NOTIFICATIONS } from '../actions/fetch-notifications';
import generateError from './util/error-generator';
import { isObject, isArray, isString, isNumber } from 'lodash/lang';
var REDUCER_NAME = 'NOTIFICATION_LIST';

// reducers in charge of generatin the notification list
export default function notifications() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var type = action.type,
        index = action.index,
        payload = action.payload;

    switch (type) {
        case ADD_NOTIFICATION:
            if (!isObject(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'object' }));
            }
            return [].concat(_toConsumableArray(state), [Object.assign({}, payload, {
                read: false
            })]);
        case ADD_NOTIFICATIONS:
        case RECEIVE_NOTIFICATIONS:
            if (!isArray(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'array' }));
            }

            return payload.reduce(function (newState, notif) {
                var newNotifId = notif.uuid,
                    read = notif.read;

                if (newState.findIndex(function (_ref) {
                    var uuid = _ref.uuid;
                    return uuid === newNotifId;
                }) === -1) {
                    newState.push(Object.assign({}, notif, { read: read || false }));
                }
                return newState;
            }, state);
        case READ_NOTIFICATION:
            if (!isString(payload) && !isNumber(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'string|number' }));
            }
            var _index = state.findIndex(function (notif) {
                return notif.uuid === action.payload;
            });
            if (_index === -1) {
                return state;
            }
            return [].concat(_toConsumableArray(state.slice(0, _index)), [
            //Add the read element to the index fitting the payload.
            Object.assign({}, state[_index], { read: true })], _toConsumableArray(state.slice(_index + 1)));
        case READ_NOTIFICATION_GROUP:
            if (!isArray(payload)) {
                throw new Error(generateError({ name: REDUCER_NAME, action: action, expectedType: 'array' }));
            }
            var ids = payload;
            //Reduce the state to change the read elements.
            return state.reduce(function (newState, notif) {
                //The notif is already read or its index is in the read indexes.
                var read = notif.read || ids.indexOf(notif.uuid) !== -1;
                newState.push(Object.assign({}, notif, { read: read }));
                return newState;
            }, []);
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNob3J0ZW4uanMiXSwibmFtZXMiOlsiQUREX05PVElGSUNBVElPTiIsIkFERF9OT1RJRklDQVRJT05TIiwiUkVBRF9OT1RJRklDQVRJT04iLCJSRUFEX05PVElGSUNBVElPTl9HUk9VUCIsIlJFQ0VJVkVfTk9USUZJQ0FUSU9OUyIsImdlbmVyYXRlRXJyb3IiLCJpc09iamVjdCIsImlzQXJyYXkiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiUkVEVUNFUl9OQU1FIiwibm90aWZpY2F0aW9ucyIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsImluZGV4IiwicGF5bG9hZCIsIkVycm9yIiwibmFtZSIsImV4cGVjdGVkVHlwZSIsInJlYWQiLCJyZWR1Y2UiLCJuZXdTdGF0ZSIsIm5vdGlmIiwibmV3Tm90aWZJZCIsInV1aWQiLCJmaW5kSW5kZXgiLCJwdXNoIiwic2xpY2UiLCJpZHMiLCJpbmRleE9mIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGdCQUFULEVBQTJCQyxpQkFBM0IsRUFBOENDLGlCQUE5QyxFQUFpRUMsdUJBQWpFLFFBQStGLFlBQS9GO0FBQ0EsU0FBUUMscUJBQVIsUUFBb0MsZ0NBQXBDO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQix3QkFBMUI7QUFDQSxTQUFRQyxRQUFSLEVBQWtCQyxPQUFsQixFQUEyQkMsUUFBM0IsRUFBcUNDLFFBQXJDLFFBQW9ELGFBQXBEO0FBQ0EsSUFBTUMsZUFBZSxtQkFBckI7O0FBR0E7QUFDQSxlQUFlLFNBQVNDLGFBQVQsR0FBZ0Q7QUFBQSxRQUF6QkMsS0FBeUIsdUVBQWpCLEVBQWlCO0FBQUEsUUFBYkMsTUFBYSx1RUFBSixFQUFJO0FBQUEsUUFDcERDLElBRG9ELEdBQzVCRCxNQUQ0QixDQUNwREMsSUFEb0Q7QUFBQSxRQUM5Q0MsS0FEOEMsR0FDNUJGLE1BRDRCLENBQzlDRSxLQUQ4QztBQUFBLFFBQ3ZDQyxPQUR1QyxHQUM1QkgsTUFENEIsQ0FDdkNHLE9BRHVDOztBQUUzRCxZQUFRRixJQUFSO0FBQ0ksYUFBS2QsZ0JBQUw7QUFDSSxnQkFBRyxDQUFDTSxTQUFTVSxPQUFULENBQUosRUFBdUI7QUFBRSxzQkFBTSxJQUFJQyxLQUFKLENBQVdaLGNBQWMsRUFBQ2EsTUFBTVIsWUFBUCxFQUFxQkcsY0FBckIsRUFBNkJNLGNBQWMsUUFBM0MsRUFBZCxDQUFYLENBQU47QUFBd0Y7QUFDakgsZ0RBQVdQLEtBQVgsc0JBQ09JLE9BRFA7QUFFSUksc0JBQU07QUFGVjtBQUlKLGFBQUtuQixpQkFBTDtBQUNBLGFBQUtHLHFCQUFMO0FBQ0ksZ0JBQUcsQ0FBQ0csUUFBUVMsT0FBUixDQUFKLEVBQXNCO0FBQUUsc0JBQU0sSUFBSUMsS0FBSixDQUFVWixjQUFjLEVBQUNhLE1BQU1SLFlBQVAsRUFBcUJHLGNBQXJCLEVBQTZCTSxjQUFjLE9BQTNDLEVBQWQsQ0FBVixDQUFOO0FBQXNGOztBQUU5RyxtQkFBT0gsUUFBUUssTUFBUixDQUFlLFVBQUNDLFFBQUQsRUFBV0MsS0FBWCxFQUFxQjtBQUFBLG9CQUMxQkMsVUFEMEIsR0FDTkQsS0FETSxDQUNoQ0UsSUFEZ0M7QUFBQSxvQkFDZEwsSUFEYyxHQUNORyxLQURNLENBQ2RILElBRGM7O0FBRXZDLG9CQUFHRSxTQUFTSSxTQUFULENBQW1CO0FBQUEsd0JBQUVELElBQUYsUUFBRUEsSUFBRjtBQUFBLDJCQUFZQSxTQUFTRCxVQUFyQjtBQUFBLGlCQUFuQixNQUF3RCxDQUFDLENBQTVELEVBQStEO0FBQzNERiw2QkFBU0ssSUFBVCxtQkFBa0JKLEtBQWxCLElBQXlCSCxNQUFNQSxRQUFRLEtBQXZDO0FBQ0g7QUFDRCx1QkFBT0UsUUFBUDtBQUNILGFBTk0sRUFNSlYsS0FOSSxDQUFQO0FBT0osYUFBS1YsaUJBQUw7QUFDSSxnQkFBRyxDQUFDTSxTQUFTUSxPQUFULENBQUQsSUFBc0IsQ0FBQ1AsU0FBU08sT0FBVCxDQUExQixFQUE2QztBQUFFLHNCQUFNLElBQUlDLEtBQUosQ0FBVVosY0FBYyxFQUFDYSxNQUFNUixZQUFQLEVBQXFCRyxjQUFyQixFQUE2Qk0sY0FBYyxlQUEzQyxFQUFkLENBQVYsQ0FBTjtBQUE4RjtBQUM3SSxnQkFBTUosU0FBUUgsTUFBTWMsU0FBTixDQUFpQixVQUFDSCxLQUFEO0FBQUEsdUJBQVdBLE1BQU1FLElBQU4sS0FBZVosT0FBT0csT0FBakM7QUFBQSxhQUFqQixDQUFkO0FBQ0EsZ0JBQUdELFdBQVUsQ0FBQyxDQUFkLEVBQWlCO0FBQ2IsdUJBQU9ILEtBQVA7QUFDSDtBQUNELGdEQUNPQSxNQUFNZ0IsS0FBTixDQUFZLENBQVosRUFBZWIsTUFBZixDQURQO0FBRUk7QUFGSiw4QkFHUUgsTUFBTUcsTUFBTixDQUhSLElBR3NCSyxNQUFNLElBSDVCLHlCQUlPUixNQUFNZ0IsS0FBTixDQUFZYixTQUFRLENBQXBCLENBSlA7QUFNSixhQUFLWix1QkFBTDtBQUNJLGdCQUFHLENBQUNJLFFBQVFTLE9BQVIsQ0FBSixFQUFzQjtBQUFFLHNCQUFNLElBQUlDLEtBQUosQ0FBVVosY0FBYyxFQUFDYSxNQUFNUixZQUFQLEVBQXFCRyxjQUFyQixFQUE2Qk0sY0FBYyxPQUEzQyxFQUFkLENBQVYsQ0FBTjtBQUFzRjtBQUM5RyxnQkFBTVUsTUFBTWIsT0FBWjtBQUNBO0FBQ0EsbUJBQU9KLE1BQU1TLE1BQU4sQ0FBYSxVQUFDQyxRQUFELEVBQVdDLEtBQVgsRUFBcUI7QUFDckM7QUFDQSxvQkFBTUgsT0FBT0csTUFBTUgsSUFBTixJQUFjUyxJQUFJQyxPQUFKLENBQVlQLE1BQU1FLElBQWxCLE1BQTRCLENBQUMsQ0FBeEQ7QUFDQUgseUJBQVNLLElBQVQsbUJBQWtCSixLQUFsQixJQUF5QkgsVUFBekI7QUFDQSx1QkFBT0UsUUFBUDtBQUNILGFBTE0sRUFLSixFQUxJLENBQVA7QUFNSjtBQUNJLG1CQUFPVixLQUFQO0FBekNSO0FBMkNIIiwiZmlsZSI6InNob3J0ZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBRERfTk9USUZJQ0FUSU9OLCBBRERfTk9USUZJQ0FUSU9OUywgUkVBRF9OT1RJRklDQVRJT04sIFJFQURfTk9USUZJQ0FUSU9OX0dST1VQfSBmcm9tICcuLi9hY3Rpb25zJztcclxuaW1wb3J0IHtSRUNFSVZFX05PVElGSUNBVElPTlN9IGZyb20gJy4uL2FjdGlvbnMvZmV0Y2gtbm90aWZpY2F0aW9ucyc7XHJcbmltcG9ydCBnZW5lcmF0ZUVycm9yIGZyb20gJy4vdXRpbC9lcnJvci1nZW5lcmF0b3InO1xyXG5pbXBvcnQge2lzT2JqZWN0LCBpc0FycmF5LCBpc1N0cmluZywgaXNOdW1iZXJ9IGZyb20gJ2xvZGFzaC9sYW5nJztcclxuY29uc3QgUkVEVUNFUl9OQU1FID0gJ05PVElGSUNBVElPTl9MSVNUJztcclxuXHJcblxyXG4vLyByZWR1Y2VycyBpbiBjaGFyZ2Ugb2YgZ2VuZXJhdGluIHRoZSBub3RpZmljYXRpb24gbGlzdFxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3RpZmljYXRpb25zKHN0YXRlID0gW10sIGFjdGlvbiA9IHt9KSB7XHJcbiAgICBjb25zdCB7dHlwZSwgaW5kZXgsIHBheWxvYWR9ID0gYWN0aW9uO1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBBRERfTk9USUZJQ0FUSU9OOlxyXG4gICAgICAgICAgICBpZighaXNPYmplY3QocGF5bG9hZCkpIHsgdGhyb3cgbmV3IEVycm9yIChnZW5lcmF0ZUVycm9yKHtuYW1lOiBSRURVQ0VSX05BTUUsIGFjdGlvbiwgZXhwZWN0ZWRUeXBlOiAnb2JqZWN0J30pKTsgfVxyXG4gICAgICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCB7XHJcbiAgICAgICAgICAgICAgICAuLi5wYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgcmVhZDogZmFsc2VcclxuICAgICAgICAgICAgfV07XHJcbiAgICAgICAgY2FzZSBBRERfTk9USUZJQ0FUSU9OUzpcclxuICAgICAgICBjYXNlIFJFQ0VJVkVfTk9USUZJQ0FUSU9OUzpcclxuICAgICAgICAgICAgaWYoIWlzQXJyYXkocGF5bG9hZCkpIHsgdGhyb3cgbmV3IEVycm9yKGdlbmVyYXRlRXJyb3Ioe25hbWU6IFJFRFVDRVJfTkFNRSwgYWN0aW9uLCBleHBlY3RlZFR5cGU6ICdhcnJheSd9KSk7IH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLnJlZHVjZSgobmV3U3RhdGUsIG5vdGlmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7dXVpZDogbmV3Tm90aWZJZCwgcmVhZH0gPSBub3RpZjtcclxuICAgICAgICAgICAgICAgIGlmKG5ld1N0YXRlLmZpbmRJbmRleCgoe3V1aWR9KSA9PiB1dWlkID09PSBuZXdOb3RpZklkKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZS5wdXNoKHsuLi5ub3RpZiwgcmVhZDogcmVhZCB8fCBmYWxzZX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgICAgICAgICB9LCBzdGF0ZSk7XHJcbiAgICAgICAgY2FzZSBSRUFEX05PVElGSUNBVElPTjpcclxuICAgICAgICAgICAgaWYoIWlzU3RyaW5nKHBheWxvYWQpICYmICFpc051bWJlcihwYXlsb2FkKSkgeyB0aHJvdyBuZXcgRXJyb3IoZ2VuZXJhdGVFcnJvcih7bmFtZTogUkVEVUNFUl9OQU1FLCBhY3Rpb24sIGV4cGVjdGVkVHlwZTogJ3N0cmluZ3xudW1iZXInfSkpOyB9XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3RhdGUuZmluZEluZGV4KCAobm90aWYpID0+IG5vdGlmLnV1aWQgPT09IGFjdGlvbi5wYXlsb2FkKTtcclxuICAgICAgICAgICAgaWYoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLnNsaWNlKDAsIGluZGV4KSxcclxuICAgICAgICAgICAgICAgIC8vQWRkIHRoZSByZWFkIGVsZW1lbnQgdG8gdGhlIGluZGV4IGZpdHRpbmcgdGhlIHBheWxvYWQuXHJcbiAgICAgICAgICAgICAgICB7Li4uc3RhdGVbaW5kZXhdLCByZWFkOiB0cnVlfSxcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLnNsaWNlKGluZGV4ICsgMSlcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICBjYXNlIFJFQURfTk9USUZJQ0FUSU9OX0dST1VQOlxyXG4gICAgICAgICAgICBpZighaXNBcnJheShwYXlsb2FkKSkgeyB0aHJvdyBuZXcgRXJyb3IoZ2VuZXJhdGVFcnJvcih7bmFtZTogUkVEVUNFUl9OQU1FLCBhY3Rpb24sIGV4cGVjdGVkVHlwZTogJ2FycmF5J30pKTsgfVxyXG4gICAgICAgICAgICBjb25zdCBpZHMgPSBwYXlsb2FkO1xyXG4gICAgICAgICAgICAvL1JlZHVjZSB0aGUgc3RhdGUgdG8gY2hhbmdlIHRoZSByZWFkIGVsZW1lbnRzLlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUucmVkdWNlKChuZXdTdGF0ZSwgbm90aWYpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vVGhlIG5vdGlmIGlzIGFscmVhZHkgcmVhZCBvciBpdHMgaW5kZXggaXMgaW4gdGhlIHJlYWQgaW5kZXhlcy5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWQgPSBub3RpZi5yZWFkIHx8IGlkcy5pbmRleE9mKG5vdGlmLnV1aWQpICE9PSAtMTtcclxuICAgICAgICAgICAgICAgIG5ld1N0YXRlLnB1c2goey4uLm5vdGlmLCByZWFkfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XHJcbiAgICAgICAgICAgIH0sIFtdKTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIl19